Comparing against Tuples, structs are more flexible because we don’t have to rely on the order of the data to specify or access the values of an instance

A struct’s name should describe the significance of the pieces of data being grouped together
Use the "struct update syntax '..'" to create a new instance of the struct that have most of the same values from another instance

Rust also supports structs that look similar to tuples, called tuple structs

We use structs to add meaning by labeling the data

using a ":?" inside a println! macro tells Rust we want to use the debug format for printing

Methods are functions defined within the scope of a struct and they run in the instance of the Struct that is calling it.
Their first parameter is always Self

Having a method that takes ownership of the instance by using just self as the first parameter is rare; this technique is usually used when the method transforms self into something else and you want to prevent the caller from using the original instance after the transformation

If a method has the same of a field of a struct, when we add () after the . notation, Rust knows we are referring to the method. If we do not att the (), Rust understands we are trying to accesses the field.

Associated functions do not have Self as a parameter but they are defined within the impl keyword, so they are part of the same library

Associated functions that aren’t methods are often used for constructors that will return a new instance of the struct

Each struct is allowed to have multiple impl blocks.

Method calls are syntactic sugar for function calls